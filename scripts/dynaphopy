#!/usr/bin/env python
import argparse
import numpy as np

import dynaphopy.functions.iofile as reading
import dynaphopy.classes.controller as controller
import dynaphopy.interface.interactive_ui as interactive_ui

from dynaphopy.functions.phonopy_link import get_force_sets_from_file
from fractions import Fraction

#Define arguments
parser = argparse.ArgumentParser(description='DynaPhonoPy options')
parser.add_argument('input_file', metavar='data_file', type=str, nargs=1,
                   help='input file containing structure related data')


group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('md_file', metavar='OUTCAR', type=str, nargs='?',
                   help='VASP Output file containing MD calculation (Super cell)')
group.add_argument('-lv', '--load_velocity', metavar='file', type=str, nargs=1,
                   help='load velocity from hdf5 file')


parser.add_argument('-i', '--interactive', action='store_true',
                    help='enter interactive mode')

parser.add_argument('-q', metavar='N', type=str, nargs=3,
                   help='wave vector used to calculate projections (default: 0 0 0)')

parser.add_argument('-r', '--frequency_range',metavar='N', type=float, nargs=3,
                   help='Frequency range for correlation function calculation (min, max, number of points)')

parser.add_argument('-n', metavar='N', type=int, default=0,
                   help='number of MD last steps to take (default: All)')

parser.add_argument('-pd', '--plot_direct', action='store_true',
                    help='Plot direct power spectrum')

parser.add_argument('-pw', '--plot_wave_vector', action='store_true',
                    help='Plot projection into wave vector')

parser.add_argument('-pp', '--plot_phonon_mode', action='store_true',
                    help='plot projection into phonon modes')

parser.add_argument('-sd', '--save_direct', metavar='file', type=str, nargs=1,
                    help='save direct power spectrum to file')

parser.add_argument('-sw', '--save_wave_vector', metavar='file', type=str, nargs=1,
                    help='save projection into wave vector to file')

parser.add_argument('-sp', '--save_phonon_mode', metavar='file', type=str, nargs=1,
                    help='save projection into phonon modes to file')

parser.add_argument('-sv', '--save_velocity', metavar='file', type=str, nargs=1, default=[None],
                    help='save velocity into hdf5 file')

parser.add_argument('-psm', '--power_spectrum_algorithm',metavar='N', type=int, nargs=1,
                   help='Select power spectrum calculation algorithm (default 4)')

parser.add_argument('-cf', '--number_of_mem_coefficients',metavar='N', type=int, nargs=1,
                   help='Number of coefficients to use in MEM algorithm (default 300)')

parser.add_argument('-csa', '--coefficient_scan_analysis', action='store_true',
                    help='Request coefficient scan analysis')

parser.add_argument('-pa', '--peak_analysis', action='store_true',
                    help='Request a peak analysis')

parser.add_argument('--silent', action='store_true',
                    help='Executes without showing plots')

parser.add_argument('-pad', '--plot_atomic_distribution',metavar='N', type=str, nargs=3,
                   help='Plot atomic distribution respect to specified direction [N N N]')

parser.add_argument('-sad', '--save_atomic_distribution',metavar='X', type=str, nargs=4,
                    help='save atomic distribution into a file [ N N N filename ]')

#For development
parser.add_argument('-ds', '--display_spectrum', action='store_true',
                    help='display phonon dispersion spectrum data in screen (just for test: not recommended)')


args = parser.parse_args()


#Get data from input file & process parameters
input_parameters = reading.read_parameters_from_input_file(args.input_file[0])

if 'structure_file_name_outcar' in input_parameters:
    structure = reading.read_from_file_structure_outcar(input_parameters['structure_file_name_outcar'])
    structure_file = input_parameters['structure_file_name_outcar']
else:
    structure = reading.read_from_file_structure_poscar(input_parameters['structure_file_name_poscar'])
    structure_file = input_parameters['structure_file_name_poscar']

if 'force_constants_file_name' in input_parameters:
    structure.set_force_set(get_force_sets_from_file(file_name=input_parameters['force_constants_file_name']))

    structure.get_data_from_dict(input_parameters)


if args.load_velocity:
    trajectory = reading.initialize_from_file(args.load_velocity[0], structure)
    structure_file = args.load_velocity[0]
else:
    trajectory = reading.read_from_file_trajectory(args.md_file, structure)

calculation = controller.Calculation(trajectory, last_steps=args.n, save_hfd5=args.save_velocity[0])

if '_band_ranges' in input_parameters:
    calculation.set_band_ranges(input_parameters['_band_ranges'])


#Set Parameters
calculation.parameters.silent = args.silent

#Process properties arguments
if args.q:
    calculation.set_reduced_q_vector(np.array([float(Fraction(s)) for s in args.q]))

if args.power_spectrum_algorithm:
    calculation.select_power_spectra_algorithm(args.power_spectrum_algorithm[0])

if args.number_of_mem_coefficients:
    calculation.parameters.number_of_coefficients_mem = args.number_of_mem_coefficients[0]

#Process calculation arguments
if args.frequency_range:
    calculation.set_frequency_range(np.linspace(*args.frequency_range))

if args.save_direct:
    calculation.write_correlation_direct(args.save_direct[0])

if args.save_wave_vector:
    calculation.write_correlation_wave_vector(args.save_wave_vector[0])

if args.save_phonon_mode:
    calculation.write_correlation_phonon(args.save_phonon_mode[0])

if args.plot_direct:
    calculation.plot_correlation_direct()

if args.plot_wave_vector:
    calculation.plot_correlation_wave_vector()

if args.plot_phonon_mode:
    calculation.plot_correlation_phonon()

if args.interactive:
    interactive_ui.interactive_interface(calculation, trajectory, args, structure_file)

if args.plot_atomic_distribution:
    calculation.plot_trajectory_distribution([float(Fraction(i)) for i in args.plot_atomic_distribution])

if args.save_atomic_distribution:
    calculation.write_trajectory_distribution([float(Fraction(i)) for i in args.save_atomic_distribution[0:3]],
                                              args.save_atomic_distribution[3])

#On development methods (not recommended)
if args.display_spectrum:
    calculation.print_phonon_dispersion_spectrum()

if args.coefficient_scan_analysis:
    calculation.phonon_width_scan_analysis()

if args.peak_analysis:
    calculation.phonon_width_individual_analysis()
