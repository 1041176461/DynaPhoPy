#!/usr/bin/env python
import numpy as np
import dynaphopy.analysis.fitting as fitting
import matplotlib.pyplot as plt

def lowess(x, y, f=2./3., iter=3):
    """lowess(x, y, f=2./3., iter=3) -> yest

    Lowess smoother: Robust locally weighted regression.
    The lowess function fits a nonparametric regression curve to a scatterplot.
    The arrays x and y contain an equal number of elements; each pair
    (x[i], y[i]) defines a data point in the scatterplot. The function returns
    the estimated (smooth) values of y.

    The smoothing span is given by f. A larger value for f will result in a
    smoother curve. The number of robustifying iterations is given by iter. The
    function will run faster with a smaller number of iterations."""
    n = len(x)
    r = int(np.ceil(f*n))
    h = [np.sort(np.abs(x - x[i]))[r] for i in range(n)]
    w = np.clip(np.abs((x[:,None] - x[None,:]) / h), 0.0, 1.0)
    w = (1.0 - w**3)**3
    yest = np.zeros(n)
    delta = np.ones(n)
    for iteration in range(iter):
        for i in range(n):
            weights = delta * w[:,i]
            b = np.array([np.sum(weights*y), np.sum(weights*y*x)])
            A = np.array([[np.sum(weights), np.sum(weights*x)],
                   [np.sum(weights*x), np.sum(weights*x*x)]])
            beta = np.linalg.solve(A, b)
            yest[i] = beta[0] + beta[1]*x[i]

        residuals = y - yest
        s = np.median(np.abs(residuals))
        delta = np.clip(residuals / (6.0 * s), -1, 1)
        delta = (1 - delta**2)**2

    return yest


input_file = open("/Users/abel/VASP_TESTS/correlation.out", "r")
degeneracy =[[4, 5, 6],[4, 5, 6]]


initial_data = []
for line in input_file:
    initial_data.append(line.split())
initial_data = np.array(initial_data,dtype=float)


test_frequencies_range = np.array(initial_data[:,0])
data = []
for phonon in degeneracy:
    data_temp = np.zeros_like(test_frequencies_range)
    for degenerate in phonon:
        data_temp += initial_data[:, degenerate]/len(phonon)
    data.append(data_temp)


f = 0.02
yest = []
for i, datum in enumerate(data):

    y2 = lowess(test_frequencies_range, datum, f=f, iter=1)
    plt.figure(i+1)
 #   plt.clf()
    plt.title('Band '+str(i+1))
    plt.suptitle('Smoothing LOWESS')

    plt.plot(test_frequencies_range, data[0], label='Original')
    plt.plot(test_frequencies_range, y2, label='Smooth', linewidth=3)
    plt.legend()

    yest.append(y2)

plt.show()

data=np.array(yest).T

fitting.phonon_fitting_analysis(data, test_frequencies_range)


