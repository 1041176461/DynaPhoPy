#!/usr/bin/env python
import numpy as np
import dynaphopy.analysis.fitting as fitting
import matplotlib.pyplot as plt

import argparse


#Arguments definition
parser = argparse.ArgumentParser(description='fitdata')
parser.add_argument('file', metavar='file', type=str,
                   help='File containing power spectra information')

parser.add_argument('-bi', metavar='indices', type=str, default=None,
                   help='Band indices (ex: "1,2 3 4, 5')

parser.add_argument('-sm', '--smooth', action='store_true',
                   help='Smooth before fitting (LOWESS method)')

parser.add_argument('-iter', metavar='N', type=int, nargs=1, default=1,
                   help='Order')

parser.add_argument('-f', metavar='N', type=float, nargs=1, default=0.02,
                   help='smooth factor')

parser.add_argument('--silent', action='store_true',
                   help='Do not show plots')

args = parser.parse_args()



#LOWESS method definition
def lowess(x, y, f=2./3., iter=3):

    n = len(x)
    r = int(np.ceil(f*n))
    h = [np.sort(np.abs(x - x[i]))[r] for i in range(n)]
    w = np.clip(np.abs((x[:,None] - x[None,:]) / h), 0.0, 1.0)
    w = (1.0 - w**3)**3
    y_smooth = np.zeros(n)
    delta = np.ones(n)
    for iteration in range(iter):
        for i in range(n):
            weights = delta * w[:,i]
            b = np.array([np.sum(weights*y), np.sum(weights*y*x)])
            A = np.array([[np.sum(weights), np.sum(weights*x)],
                   [np.sum(weights*x), np.sum(weights*x*x)]])
            beta = np.linalg.solve(A, b)
            y_smooth[i] = beta[0] + beta[1]*x[i]

        residuals = y - y_smooth
        s = np.median(np.abs(residuals))
        delta = np.clip(residuals / (6.0 * s), -1, 1)
        delta = (1 - delta**2)**2

    return y_smooth

#Process input data
try:
    input_file = open(args.file, "r")
except IOError:
    print("File not found")
    exit()

if args.bi is None:
    data_num = len(input_file.readline().split())
    degeneracy = [[i] for i in range(1, data_num)]
else:
    degeneracy = [[int(j) for j in i.split()] for i in args.bi.split(',')]


initial_data = []
for line in input_file:
    initial_data.append(line.split())
initial_data = np.array(initial_data,dtype=float)


test_frequencies_range = np.array(initial_data[:,0])
data = []
for phonon in degeneracy:
    data_temp = np.zeros_like(test_frequencies_range)
    for degenerate in phonon:
        data_temp += initial_data[:, degenerate]/len(phonon)
    data.append(data_temp)



#Smoothing using LOWESS method
if args.smooth:

    y_smooth = []
    for i, datum in enumerate(data):

        y2 = lowess(test_frequencies_range, datum, f=args.f, iter=args.iter)

        if not(args.silent):
            plt.figure(i+1)
            plt.title('Band '+str(i+1))
            plt.suptitle('Smoothing LOWESS')

            plt.plot(test_frequencies_range, datum, label='Original')
            plt.plot(test_frequencies_range, y2, label='Smooth', linewidth=3)
            plt.legend()

        y_smooth.append(y2)

    if not(args.silent):
        plt.show()

    data=np.array(y_smooth).T
else:
    data=np.array(data).T

#Analysis using Dynaphopy functions
fitting.phonon_fitting_analysis(data, test_frequencies_range, show_plots=not(args.silent))

